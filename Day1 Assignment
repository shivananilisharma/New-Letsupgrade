Question 1
  Explore and explain the various methods in console function
Ans:A Web console is a tool which is mainly used to log information associated with a web page like: network requests, javascript, security errors, warnings, CSS etc. 
    It enables us to interact with a web page by executing javascript expression in the contents of the page.
        The console object provides us with several different methods, like : 
        1.console.log()
              Mainly used to log(print) the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc. 
              Ex: console.log('abc');  
                  console.log(1); 
                  console.log(true); 
        
        2.console.error()
              Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.
              Ex: console.error('This is a simple error');  
            
        3.console.warn()
              Used to log warning message to the console. By default the warning message will be highlighted with yellow color.
              Ex: console.warn('This is a warning.'); 
              
         4.console.clear()
              Used to clear the console. The console will be cleared, in case of Chrome a simple overlayed text will be printed like :
              ‘Console was cleared’ while in firefox no message is returned. 
              Ex: console.clear();
              
         5. console.time() and console.timeEnd()
                Whenever we want to know the amount of time spend by a block or a function, we can make use of the time() and timeEnd() methods provided by the javascript
                console object.They take a label which must be same, and the code inside can be anything( function, object, simple console).  
                Ex:console.time('abc'); 
                   let fun =  function(){ 
                   console.log('fun is running'); 
                   } 
                   let fun2 = function(){ 
                   console.log('fun2 is running..'); 
                   } 
                   fun(); // calling fun(); 
                   fun2(); // calling fun2(); 
                   console.timeEnd('abc');      
                   
          6. console.table()
                This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.
                Ex: console.table({'a':1, 'b':2}); 
                
          7.console.count()
                This method is used to count the number that the function hit by this counting method. 
                Ex:for(let i=0;i<5;i++){ 
                   console.count(i); }
                   
          8. console.group() and console.groupEnd()
                group() and groupEnd() methods of the console object allows us to group contents in a separate block, which will be indented. Just like the time() and the
                timeEnd() they also accepts label, again of same value.
                Ex:console.group('simple'); 
                   console.warn('warning!'); 
                   console.error('error here'); 
                   console.log('vivi vini vici'); 
                   console.groupEnd('simple'); 
                   console.log('new section');  
                   
           9. Custom Console Logs
                User can add Styling to the console logs in order to make logs Custom . The Syntax for it is to add the css styling as a parameter to the logs which will 
                replace %c in the logs as shown in the example below .
                Ex: const spacing = '10px'; 
                    const styles =  `padding: ${spacing}; background-color: white; color: green; font-style:  
                    italic; border: 1px solid black; font-size: 2em;`; 
                    console.log('%cGeeks for Geeks', styles); 
                
            10. Custom Console Logs
                    User can add Styling to the console logs in order to make logs Custom . The Syntax for it is to add the css styling as a parameter to the logs which will
                    replace %c in the logs as shown in the example below .
                    Ex: const spacing = '10px'; 
                        const styles =  `padding: ${spacing}; background-color: white; color: green; font-style:  
                        italic; border: 1px solid black; font-size: 2em;`; 
                        console.log('%cGeeks for Geeks', styles); 
                        
 Question 2
 Write the difference between var,let and const with code examples.
 Ans: 1. Var:
            The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable.
            Example: var a =10;
            Variable declarations are processed before the execution of the code.
            The scope of a JavaScript variable declared with var is its current execution context.
            The scope of a JavaScript variable declared outside the function is global.
    Consider the following code snippet.
          function nodeSimplified(){
          var a =10;
          console.log(a);  // output 10
          if(true){
          var a=20;
          console.log(a); // output 20
           }
          console.log(a);  // output 20
           }
         
       2. let:
              The let statement declares a local variable in a block scope. It is similar to var, in that we can optionally initialize the variable.
              Example: let a =10;
              The let statement allows you to create a variable with the scope limited to the block on which it is used.
              It is similar to the variable we declare in other languages like Java, .NET, etc.
      Consider the following code snippet.
              function nodeSimplified(){
              let a =10;
              console.log(a);  // output 10
              if(true){
              let a=20;
              console.log(a); // output 20
               }
              console.log(a);  // output 10
               }
               
         3. const
                const statement values can be assigned once and they cannot be reassigned. The scope of const statement works similar to let statements.
                Example: const a =10;
                         function nodeSimplified(){
                         const MY_VARIABLE =10;
                         console.log(MY_VARIABLE);  //output 10 
                          }
       
Question 3
Write a brief intro on available Datatypes in javascript
Ans:  There are six basic data types in JavaScript which can be divided into three main categories: primitive (or primary), composite (or reference), and special data types. 
      String, Number, and Boolean are primitive data types. Object, Array, and Function (which are all types of objects) are composite data types.Whereas Undefined and Null 
      are special data types.
              1.The String Data Type:
                  The string data type is used to represent textual data (i.e. sequences of characters). Strings are created using single or double quotes surrounding one or
                  more characters, as shown below:
                  Example:
                      var a = 'Hi there!';  // using single quotes
                      var b = "Hi there!";  // using double quotes
              
              2. The Number Data Type:
                    The number data type is used to represent positive or negative numbers with or without decimal place, or numbers written using exponential notation
                    e.g. 1.5e-4 (equivalent to 1.5x10-4).
                    Example
                        var a = 25;         // integer
                        var b = 80.5;       // floating-point number
                        var c = 4.25e+6;    // exponential notation, same as 4.25e6 or 4250000
                        var d = 4.25e-6;    // exponential notation, same as 0.00000425
                        
              3.The Boolean Data Type:
                    The Boolean data type can hold only two values: true or false. It is typically used to store values like yes (true) or no (false), on (true) or off (false),
                    etc. as demonstrated below:
                    Example
                        var isReading = true;   // yes, I'm reading
                        var isSleeping = false; // no, I'm not sleeping
                        
             4.The Undefined Data Type:
                  The undefined data type can only have one value-the special value undefined. If a variable has been declared, but has not been assigned a value, has the value undefined.
                  Example:
                      var a;
                      var b = "Hello World!"
                      alert(a) // Output: undefined
                      alert(b) // Output: Hello World!
            
             5.The Null Data Type:
                    This is another special data type that can have only one value-the null value. A null value means that there is no value. It is not equivalent to an empty 
                    string ("") or 0, it is simply nothing.A variable can be explicitly emptied of its current contents by assigning it the null value.         
                    Example
                        var a = null;
                        alert(a); // Output: null
                        var b = "Hello World!"
                        alert(b); // Output: Hello World!
                        b = null;
                        alert(b) // Output: null
            
            6.The Object Data Type:
                  The object is a complex data type that allows you to store collections of data.An object contains properties, defined as a key-value pair.
                  A property key (name) is always a string, but the value can be any data type, like strings, numbers, booleans, or complex data types like arrays, function and
                  other objects. You'll learn more about objects in upcoming chapters.
          The following example will show you the simplest way to create an object in JavaScript.
                  Example
                      var emptyObject = {};
                      var person = {"name": "Clark", "surname": "Kent", "age": "36"};
                      // For better reading
                      var car = {
                     "modal": "BMW X3",
                     "color": "white",
                     "doors": }
